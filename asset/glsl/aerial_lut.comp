#version 460 core

#define PI 3.14159265

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(std140, binding = 0) uniform AtmosphereProperties{
    vec3 rayleigh_scattering;
    float rayleigh_density_h;

    float mie_scattering;
    float mie_asymmetry_g;
    float mie_absorption;
    float mie_density_h;

    vec3 ozone_absorption;
    float ozone_center_h;
    float ozone_width;

    float ground_radius;
    float top_atmosphere_radius;
};

layout(std140, binding = 1) uniform AerialParams{
    vec3 sun_dir;
    float sun_theta;
    vec3 frustum_a;
    float max_aerial_distance;
    vec3 frustum_b;
    int ray_march_step_count_per_slice;
    vec3 frustum_c;
    int enable_multiscattering;
    vec3 frustum_d;
    float view_height;
    vec3 view_pos;
    int enable_shadow;
    mat4 shadow_vp;
    float world_scale;
    int slice_z_count;
};

layout(binding = 0) uniform sampler2D Transmittance;
layout(binding = 1) uniform sampler2D MultiScattering;
layout(binding = 2) uniform sampler2D ShadowMap;

layout(rgba32f, binding = 0) uniform writeonly image3D AerialPerspectiveLUT;

float relativeLuminance(vec3 c){
    return 0.2126 * c.r + 0.7152 * c.g + 0.0722 * c.b;
}

bool hasIntersectionWithSphere(vec3 o, vec3 d, float R){
    float A = dot(d, d);
    float B = 2 * dot(o, d);
    float C = dot(o, o) - R * R;
    float delta = B * B - 4 * A * C;
    return (delta >= 0) && ((C <= 0) || (B <= 0));
}

bool findClosestIntersectionWithSphere(vec3 o, vec3 d, float R, out float t){
    float A = dot(d, d);
    float B = 2 * dot(o, d);
    float C = dot(o, o) - R * R;
    float delta = B * B - 4 * A * C;
    if (delta < 0)
    return false;
    t = (-B + (C <= 0 ? sqrt(delta) : -sqrt(delta))) / (2 * A);
    return (C <= 0) || (B <= 0);
}

vec3 evalPhaseFunction(float h, float u){
    vec3 sRayleigh = rayleigh_scattering * exp(-h / rayleigh_density_h);
    float sMie = mie_scattering * exp(-h / mie_density_h);
    vec3 s = sRayleigh + sMie;

    float g = mie_asymmetry_g, g2 = g * g, u2 = u * u;
    float pRayleigh = 3 / (16 * PI) * (1 + u2);

    float m = 1 + g2 - 2 * g * u;
    float pMie = 3 / (8 * PI) * (1 - g2) * (1 + u2) / ((2 + g2) * m * sqrt(m));

    vec3 result;
    result.x = s.x > 0 ? (pRayleigh * sRayleigh.x + pMie * sMie) / s.x : 0;
    result.y = s.y > 0 ? (pRayleigh * sRayleigh.y + pMie * sMie) / s.y : 0;
    result.z = s.z > 0 ? (pRayleigh * sRayleigh.z + pMie * sMie) / s.z : 0;
    return result;
}

float safeSqrt(float a) {
    return sqrt(max(a, 0.0));
}

float clampDistance(float d) {
    return max(d, 0.0);
}

float distanceToTopAtmosphereBoundary(float r, float mu){
    float discriminant = r * r * (mu * mu - 1.0) + top_atmosphere_radius * top_atmosphere_radius;
    return clampDistance(-r * mu + safeSqrt(discriminant));
}

float getTextureCoordFromUnitRange(float x, int texture_size) {
    return 0.5 / float(texture_size) + x * (1.0 - 1.0 / float(texture_size));
}

vec2 getTransmittanceTextureUvFromRMu(float r, float mu, in ivec2 res){
    float H =  sqrt(top_atmosphere_radius * top_atmosphere_radius - ground_radius * ground_radius);
    float rho = safeSqrt(r * r - ground_radius * ground_radius);
    float d = distanceToTopAtmosphereBoundary(r, mu);
    float d_min = (top_atmosphere_radius - r);
    float d_max = rho + H;
    float x_mu = (d - d_min) / (d_max - d_min);
    float x_r = rho / H;
    return vec2(getTextureCoordFromUnitRange(x_mu, res.x), getTextureCoordFromUnitRange(x_r, res.y));
}

// theta is view with horizon
vec3 getTransmittance(float h, float theta){
    float r = h * 0.99  + ground_radius;
    float mu = cos(PI / 2 - theta);
    vec2 uv = getTransmittanceTextureUvFromRMu(r, mu, textureSize(Transmittance, 0));
    return texture(Transmittance, uv).rgb;
}

vec3 getMultiScattering(float h, float theta){
    float u = h / (top_atmosphere_radius - ground_radius);
    float v = 0.5 + 0.5 * sin(theta);
    return texture(MultiScattering, vec2(u, v)).rgb;
}

void getSigmaST(float h, out vec3 sigma_s, out vec3 sigma_t){
    vec3 rayleigh = rayleigh_scattering * exp(-h / rayleigh_density_h);
    vec3 mie_s = vec3(mie_scattering) * exp(-h / mie_density_h);
    vec3 mie_t = vec3(mie_scattering + mie_absorption) * exp(-h / mie_density_h);
    vec3 ozone = ozone_absorption * max(0.0, 1 - abs(h - ozone_center_h) / (ozone_width * 0.5));
    sigma_s = rayleigh + mie_s;
    sigma_t = rayleigh + mie_t + ozone;
}

void main() {
    ivec3 res = imageSize(AerialPerspectiveLUT);
    //debug for imageSize returned res.z == 1 for image3D
    res.z = slice_z_count;
    ivec2 g_index = ivec2(gl_WorkGroupSize.xy * gl_WorkGroupID.xy + gl_LocalInvocationID.xy);
    if (g_index.x >= res.x || g_index.y >= res.y){
        return;
    }

    float x = (g_index.x + 0.5) / res.x;
    float y = (g_index.y + 0.5) / res.y;
    vec3 view_dir = mix(mix(frustum_a, frustum_b, x), mix(frustum_c, frustum_d, x), y);
    vec3 planet_view_pos = vec3(0, view_height + ground_radius, 0);
    float u = dot(sun_dir, -view_dir);

    float max_t = 0;
    if (!findClosestIntersectionWithSphere(planet_view_pos, view_dir, ground_radius, max_t)){
        findClosestIntersectionWithSphere(planet_view_pos, view_dir, top_atmosphere_radius, max_t);
    }
    float slice_depth = max_aerial_distance / res.z;
    float start_t = 0;
    float end_t = min(max_t, 0.5 * slice_depth);//special for first slice

    vec3 sum_sigma_t = vec3(0);
    vec3 sum_in_scattering = vec3(0);
    float rand = fract(sin(dot(vec2(x, y), vec2(12.9898, 78.233) * 2.0)) * 43758.5453);

    for (int z = 0; z < res.z; ++z){
        float dt = (end_t - start_t) / ray_march_step_count_per_slice;
        float t = start_t;
        for (int i = 0; i < ray_march_step_count_per_slice; ++i){
            float mid_t = t + dt * 0.5;
            vec3 ith_pos = planet_view_pos + view_dir * mid_t;
            float ith_h = length(ith_pos) - ground_radius;
            vec3 ith_sigma_s, ith_sigma_t;
            getSigmaST(ith_h, ith_sigma_s, ith_sigma_t);

            vec3 ith_transmittance = exp(-(sum_sigma_t + ith_sigma_t * dt * 0.5));

            if (!hasIntersectionWithSphere(ith_pos, -sun_dir, ground_radius)){
                vec3 shadow_pos = view_pos + view_dir * mid_t / world_scale;
                vec4 shadow_clip_pos = shadow_vp * vec4(shadow_pos, 1.0);
                vec3 shadow_ndc = shadow_clip_pos.xyz / shadow_clip_pos.w;
                vec2 shadow_uv = shadow_ndc.xy * 0.5 + 0.5;

                bool in_shadow = bool(enable_shadow);
                if (bool(enable_shadow) && all(equal(clamp(shadow_uv, vec2(0), vec2(1)), shadow_uv))){
                    float ray_z = shadow_clip_pos.z * 0.5 + 0.5;//opengl z is -1 ~ 1
                    float shadow_z = texture(ShadowMap, shadow_uv).r;
                    in_shadow = ray_z >= shadow_z;
                }
                if (!in_shadow){
                    vec3 rho = evalPhaseFunction(ith_h, u);
                    //view distance is small for the planet, so use view pos sun theta to approximate is ok
                    vec3 ith_sun_transmittance = getTransmittance(ith_h, sun_theta);
                    sum_in_scattering += ith_sun_transmittance * ith_sigma_s * rho * ith_sun_transmittance * dt;
                }
            }

            if (bool(enable_multiscattering)){
                //rho is pu = 1 / (4 * PI) and is consider in the pre-compute multi-scattering
                sum_in_scattering += getMultiScattering(ith_h, sun_theta) * ith_sigma_s * ith_transmittance * dt;
            }

            sum_sigma_t += ith_sigma_t;
            t += dt;
        }
        float transmittance = relativeLuminance(exp(-sum_sigma_t));
        imageStore(AerialPerspectiveLUT, ivec3(g_index, z), vec4(sum_in_scattering, transmittance));
        start_t = end_t;
        end_t = min(max_t, end_t + slice_depth);
    }
}
